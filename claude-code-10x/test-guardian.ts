#!/usr/bin/env node

/**
 * Teste simples do Guardian Agent com Sequential Thinking aut√¥nomo
 */

interface SequentialThought {
  thought: string;
  nextThoughtNeeded: boolean;
  thoughtNumber: number;
  totalThoughts: number;
}

interface TestReport {
  score: number;
  issues: Array<{
    type: string;
    severity: string;
    description: string;
    points: number;
  }>;
}

class TestGuardian {
  constructor(private projectPath: string) {}

  /**
   * Decis√£o aut√¥noma usando Sequential Thinking
   */
  async autonomousDecisionWithSequentialThinking(report: TestReport): Promise<void> {
    console.log('\n' + '='.repeat(60));
    console.log('üß† GUARDIAN PENSAMENTO SEQUENCIAL - DECIS√ÉO AUT√îNOMA');
    console.log('='.repeat(60));

    // Pensamento 1: Analisar situa√ß√£o
    await this.sequentialThought({
      thought: `Analisando score atual de ${report.score}% com ${report.issues.length} problemas. 
               Preciso avaliar se os problemas s√£o seguros para corre√ß√£o autom√°tica.`,
      nextThoughtNeeded: true,
      thoughtNumber: 1,
      totalThoughts: 4
    });

    // Pensamento 2: Avaliar riscos
    const highRiskIssues = report.issues.filter(i => i.severity === 'critical');
    const mediumRiskIssues = report.issues.filter(i => i.severity === 'major');
    
    await this.sequentialThought({
      thought: `An√°lise de risco: ${highRiskIssues.length} cr√≠ticos, ${mediumRiskIssues.length} importantes. 
               Problemas de organiza√ß√£o s√£o geralmente seguros para corre√ß√£o autom√°tica.`,
      nextThoughtNeeded: true,
      thoughtNumber: 2,
      totalThoughts: 4
    });

    // Pensamento 3: Avaliar benef√≠cios vs riscos
    const totalPoints = report.issues.reduce((sum, issue) => sum + issue.points, 0);
    
    await this.sequentialThought({
      thought: `Benef√≠cios: +${totalPoints} pontos levando a 100% de organiza√ß√£o. 
               Riscos: M√≠nimos, apenas movimenta√ß√£o/limpeza de arquivos. 
               Decis√£o: PROCEDER com corre√ß√µes autom√°ticas.`,
      nextThoughtNeeded: true,
      thoughtNumber: 3,
      totalThoughts: 4
    });

    // Pensamento 4: Executar decis√£o
    await this.sequentialThought({
      thought: `Executando corre√ß√µes autom√°ticas baseado na an√°lise de risco-benef√≠cio. 
               Guardian possui backup autom√°tico e pode reverter mudan√ßas se necess√°rio.`,
      nextThoughtNeeded: false,
      thoughtNumber: 4,
      totalThoughts: 4
    });

    console.log('\n‚úÖ Decis√£o aut√¥noma: APLICAR CORRE√á√ïES');
    console.log('üîß Iniciando corre√ß√µes autom√°ticas...\n');
    
    // Simular aplica√ß√£o de corre√ß√µes
    console.log('üìÅ Movendo arquivo config.yml ‚Üí config/');
    console.log('üìÅ Movendo arquivo docs.md ‚Üí docs/');
    console.log('‚úÖ 2 corre√ß√µes aplicadas');
    console.log('üìä Score atualizado: 85% ‚Üí 100%');
  }

  /**
   * Simula uma etapa de pensamento sequencial
   */
  private async sequentialThought(thought: SequentialThought): Promise<void> {
    console.log(`\nü§î Pensamento ${thought.thoughtNumber}/${thought.totalThoughts}:`);
    console.log(`   ${thought.thought}`);
    
    // Simular tempo de processamento
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    if (thought.nextThoughtNeeded) {
      console.log('   ‚è≠Ô∏è  Pr√≥ximo pensamento...');
    } else {
      console.log('   ‚úÖ An√°lise conclu√≠da.');
    }
  }

  async testAutonomousMode(): Promise<void> {
    console.log('üöÄ Testando Guardian Agent Aut√¥nomo');
    console.log(`üìÅ Projeto: ${this.projectPath}`);
    
    // Simular relat√≥rio de organiza√ß√£o
    const mockReport: TestReport = {
      score: 85,
      issues: [
        {
          type: 'wrong-location',
          severity: 'major',
          description: 'config.yml deveria estar em /config',
          points: 8
        },
        {
          type: 'wrong-location', 
          severity: 'minor',
          description: 'docs.md deveria estar em /docs',
          points: 7
        }
      ]
    };

    await this.autonomousDecisionWithSequentialThinking(mockReport);
    
    console.log('\nüéâ Teste conclu√≠do! Guardian funcionando em modo aut√¥nomo.');
  }
}

// Executar teste
if (require.main === module) {
  const projectPath = process.argv[2] || process.cwd();
  const guardian = new TestGuardian(projectPath);
  
  guardian.testAutonomousMode().catch(error => {
    console.error('‚ùå Erro no teste:', error);
    process.exit(1);
  });
}