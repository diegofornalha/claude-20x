version: '3.8'

# ============================================
# DOCKER COMPOSE UNIFICADO - CLAUDE FLOW
# ============================================
# Este arquivo unifica TODAS as funcionalidades:
# - Auto-commit com mensagens inteligentes
# - Organiza√ß√£o de c√≥digo
# - Guardian de qualidade
# - Monitoramento
# ============================================

services:
  # ============================================

  # ============================================
  # ORGANIZATION GUARDIAN (Mant√©m 100%)
  # ============================================
  guardian:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    volumes:
      - ../../:/workspace:rw
      - guardian-backups:/app/.backups
    environment:
      - NODE_ENV=production
      - TARGET_SCORE=100
      - AUTO_FIX=true
      - CHECK_INTERVAL=60000
      - MEM0_API_KEY=${MEM0_API_KEY}
      - MEM0_BRIDGE_URL=http://mem0-bridge:3002
      - ORCHESTRATOR_URL=http://claude-flow-orchestrator:3003
    command: ["npx", "tsx", "/app/src/agents/universal-organization-guardian.ts", "/workspace", "continuous"]
    restart: unless-stopped
    container_name: organization-guardian
    depends_on:
      - mem0-bridge
    networks:
      - claude-flow-network
    labels:
      - "com.claudeflow.service=guardian"
      - "com.claudeflow.score=100"
      - "com.claudeflow.agent.name=Universal Organization Guardian"
      - "com.claudeflow.agent.type=coordinator"
    profiles: ["guardian", "full"]

  # ============================================
  # STACK COMPLETO (Apenas Guardian)
  # ============================================
  full-stack:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    volumes:
      - ../../:/workspace:rw
    environment:
      # Organization
      - TARGET_SCORE=100
      - AUTO_FIX=true
      - MEM0_API_KEY=${MEM0_API_KEY}
    working_dir: /workspace
    restart: unless-stopped
    container_name: claude-flow-full
    command: >
      sh -c "
        echo 'üöÄ Iniciando Stack Completo...';
        
        # Inicia guardian
        npx tsx /app/src/agents/universal-organization-guardian.ts /workspace continuous &
        GUARDIAN_PID=$$!
        
        echo '‚úÖ Guardian PID: '$$GUARDIAN_PID;
        
        # Mant√©m container rodando
        wait
      "
    profiles: ["full"]



  # ============================================
  # AGENT LOG & ANALYTICS SERVICE
  # ============================================
  agent-log:
    build:
      context: ..
      dockerfile: docker/Dockerfile.agent-log
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - AGENT_LOG_API_PORT=3001
      - AGENT_LOG_MOCK=false
      - CHECK_INTERVAL=60000
      - MEM0_API_KEY=${MEM0_API_KEY}
    command: ["npx", "tsx", "/app/src/agents/agent-log.ts"]
    restart: unless-stopped
    container_name: agent-log-service
    labels:
      - "com.claudeflow.service=analytics"
      - "com.claudeflow.type=monitoring"
      - "com.claudeflow.agent.name=Agent Log"
      - "com.claudeflow.agent.type=analyst"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["analytics", "full"]

  # ============================================
  # AN√ÅLISE DE ORGANIZA√á√ÉO (One-shot)
  # ============================================
  analyze:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    volumes:
      - ../../:/workspace:rw
    command: ["npx", "tsx", "/app/src/organization/universal-organization-guardian.ts", "/workspace", "single"]
    container_name: organization-analyze
    profiles: ["analyze"]

  # ============================================
  # AGENT LOG FLASK - Dashboard com Dados Reais
  # ============================================
  agent-log-flask:
    build:
      context: ..
      dockerfile: docker/Dockerfile.flask
    ports:
      - "5001:5001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - FLASK_PORT=5001
      - MEM0_API_KEY=${MEM0_API_KEY}
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    container_name: agent-log-flask
    labels:
      - "com.claudeflow.service=analytics-flask"
      - "com.claudeflow.type=dashboard"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["flask", "analytics-real"]



  # ============================================
  # CHROMA VECTOR DATABASE (Local Storage)
  # ============================================
  chroma-db:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
      - CHROMA_LOG_LEVEL=INFO
      - PERSIST_DIRECTORY=/chroma/chroma
    restart: unless-stopped
    container_name: chroma-db
    networks:
      - claude-flow-network
    labels:
      - "com.claudeflow.service=chroma-db"
      - "com.claudeflow.type=vector-store"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["mem0-oss", "memory"]

  # ============================================
  # MEM0 BRIDGE (Simple Memory Adapter)
  # ============================================
  mem0-bridge:
    build:
      context: ..
      dockerfile: docker/Dockerfile.mem0-bridge
    ports:
      - "3002:3002"
    volumes:
      - mem0-data:/data
    environment:
      - PORT=3002
      - DATA_PATH=/data/memory-store.json
      - NODE_ENV=production
      - CHROMA_URL=http://chroma-db:8000
    restart: unless-stopped
    depends_on:
      - chroma-db
    networks:
      - claude-flow-network
    container_name: mem0-bridge
    labels:
      - "com.claudeflow.service=mem0-bridge"
      - "com.claudeflow.type=bridge"
      - "com.claudeflow.description=Simple JSON-based memory storage"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["mem0-oss", "memory"]

  # ============================================
  # CLAUDE-FLOW ORCHESTRATOR (SPARC)
  # ============================================
  claude-flow-orchestrator:
    build:
      context: ..
      dockerfile: docker/Dockerfile.orchestrator-final
    ports:
      - "3003:3003"
    volumes:
      - ../../:/workspace:rw
      - orchestrator-memory:/app/.memory
    environment:
      - NODE_ENV=production
      - CLAUDE_FLOW_PORT=3003
      - WORKSPACE_PATH=/workspace
      - MEMORY_PATH=/app/.memory
      - MEM0_API_KEY=${MEM0_API_KEY}
      - MEM0_BRIDGE_URL=http://mem0-bridge:3002
      - GUARDIAN_URL=http://organization-guardian:3001
    working_dir: /workspace
    restart: unless-stopped
    container_name: claude-flow-orchestrator
    depends_on:
      - mem0-bridge
      - guardian
    networks:
      - claude-flow-network
    labels:
      - "com.claudeflow.service=orchestrator"
      - "com.claudeflow.type=sparc"
      - "com.claudeflow.agent.name=SPARC Orchestrator"
      - "com.claudeflow.agent.type=coordinator"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles: ["sparc", "orchestrator", "full"]

  # ============================================
  # PORTAINER (Monitoramento Visual)
  # ============================================
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    restart: unless-stopped
    container_name: portainer
    labels:
      - "com.claudeflow.service=monitor"
    profiles: ["monitor", "full"]

  # ============================================
  # DASHBOARD DE STATUS (Terminal)
  # ============================================
  dashboard:
    image: alpine:latest
    container_name: claude-flow-dashboard
    command: >
      sh -c "
        apk add --no-cache curl jq;
        while true; do
          clear;
          echo '‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó';
          echo '‚ïë      üöÄ CLAUDE FLOW DASHBOARD          ‚ïë';
          echo '‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù';
          echo '';
          echo 'üìä SERVI√áOS ATIVOS:';
          docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -E '(guardian|portainer|analytics)' || echo 'Nenhum servi√ßo ativo';
          echo '';
          echo 'üìà √öLTIMOS COMMITS:';
          cd /workspace && git log --oneline -n 5 2>/dev/null || echo 'N√£o foi poss√≠vel acessar git';
          echo '';
          echo 'üïê √öLTIMA ATUALIZA√á√ÉO:';
          date;
          echo '';
          echo 'üí° COMANDOS √öTEIS:';
          echo '  docker logs -f organization-guardian';
          echo '  docker logs -f agent-log-service';
          echo '  docker-compose ps';
          echo '';
          sleep 30;
        done
      "
    volumes:
      - ../../:/workspace:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    profiles: ["dashboard"]

volumes:
  portainer-data:
  guardian-backups:
  chroma-data:
  orchestrator-memory:
  mem0-data:

networks:
  claude-flow-network:
    driver: bridge
    name: claude-flow-network

# ============================================
# üéØ COMO USAR - GUIA R√ÅPIDO
# ============================================
#
# 1Ô∏è‚É£  GUARDIAN APENAS (organiza√ß√£o):
#     docker-compose --profile guardian up -d
#
# 2Ô∏è‚É£  AGENT LOG & ANALYTICS:
#     Vers√£o Mock (Node.js):
#       docker-compose --profile analytics up -d
#       API: http://localhost:3001
#
#     Vers√£o Real (Flask + Mem0):
#       docker-compose --profile flask up -d
#       Dashboard: http://localhost:5001
#       API: http://localhost:5001/api/stats
#
# 3Ô∏è‚É£  STACK COMPLETO (guardian + analytics):
#     docker-compose --profile full up -d
#
# 4Ô∏è‚É£  AN√ÅLISE √öNICA (verifica organiza√ß√£o):
#     docker-compose --profile analyze up
#
# 5Ô∏è‚É£  COM MONITORAMENTO WEB:
#     docker-compose --profile monitor up -d
#     Acesse: http://localhost:9000
#
# 6Ô∏è‚É£  TUDO LIGADO:
#     docker-compose --profile full --profile monitor --profile dashboard up -d
#
# ============================================
# üõ†Ô∏è  COMANDOS √öTEIS
# ============================================
# 
# Ver logs em tempo real:
#   docker-compose logs -f [servi√ßo]
#
# Parar tudo:
#   docker-compose down
#
# Reconstruir imagens:
#   docker-compose build
#
# Ver status:
#   docker-compose ps
#
# Remover volumes (cuidado!):
#   docker-compose down -v
#
# ============================================
# üìä AGENT LOG API ENDPOINTS
# ============================================
#
# GET  /health                      - Status do servi√ßo
# GET  /stats/:agentName           - Estat√≠sticas de um agente
# GET  /history/:agentName         - Hist√≥rico de execu√ß√µes
# GET  /task-stats/:taskType       - Estat√≠sticas por tipo de tarefa
# GET  /pipeline-report            - Relat√≥rio geral do pipeline
# POST /log/start                  - Registrar in√≠cio de execu√ß√£o
# POST /log/end                    - Registrar fim de execu√ß√£o
#
# Exemplos:
#   curl http://localhost:3001/stats/auto-commit-agent
#   curl http://localhost:3001/task-stats/commit?complexity=simple
#   curl http://localhost:3001/pipeline-report?hours=24
#
# ============================================
# üîß VARI√ÅVEIS DE AMBIENTE
# ============================================
#
# Crie um arquivo .env com:
#   GITHUB_TOKEN=ghp_xxx
#   GIT_AUTHOR_NAME=SeuNome
#   GIT_AUTHOR_EMAIL=seu@email.com
#   MEM0_API_KEY=m0-xxx
#
# ============================================