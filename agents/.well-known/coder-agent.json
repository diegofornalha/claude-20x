{
  "protocolVersion": "0.2.9",
  "name": "SPARC-Coder-Agent",
  "description": "Expert coding agent implementing SPARC methodology with TDD, parallel code analysis, and Batchtools optimization",
  "url": "http://localhost:8002/sparc-coder",
  "preferredTransport": "JSONRPC",
  "additionalInterfaces": [
    {
      "url": "http://localhost:8002/sparc-coder",
      "transport": "JSONRPC"
    },
    {
      "url": "http://localhost:8002/sparc-coder/grpc",
      "transport": "GRPC"
    }
  ],
  "provider": {
    "organization": "Claude-Flow SPARC System",
    "url": "https://github.com/ruvnet/claude-code-flow",
    "contact": "sparc-team@claude-flow.ai"
  },
  "iconUrl": "http://localhost:8002/icons/coder-agent.png",
  "version": "1.0.0",
  "documentationUrl": "https://github.com/ruvnet/claude-code-flow/docs/agents/coder.md",
  "capabilities": {
    "streaming": true,
    "pushNotifications": true,
    "stateTransitionHistory": true,
    "extensions": [
      {
        "name": "sparc-methodology",
        "version": "1.0.0",
        "documentationUrl": "https://github.com/ruvnet/claude-code-flow/docs/sparc.md"
      },
      {
        "name": "batchtools-optimization",
        "version": "1.0.0",
        "documentationUrl": "https://github.com/ruvnet/claude-code-flow/docs/batchtools.md"
      },
      {
        "name": "tdd-integration",
        "version": "1.0.0",
        "documentationUrl": "https://github.com/ruvnet/claude-code-flow/docs/tdd.md"
      }
    ]
  },
  "securitySchemes": {
    "bearer": {
      "type": "http",
      "scheme": "bearer",
      "description": "Bearer token authentication for A2A protocol"
    },
    "apiKey": {
      "type": "apiKey",
      "in": "header",
      "name": "X-API-Key",
      "description": "API key authentication for service access"
    }
  },
  "security": [
    {"bearer": []},
    {"apiKey": []}
  ],
  "defaultInputModes": [
    "text/plain",
    "application/json",
    "text/x-typescript",
    "text/x-python",
    "text/x-javascript",
    "text/x-java",
    "text/x-csharp"
  ],
  "defaultOutputModes": [
    "text/plain",
    "application/json",
    "text/x-typescript",
    "text/x-python",
    "text/x-javascript",
    "text/markdown"
  ],
  "skills": [
    {
      "id": "SPARC_PSEUDOCODE",
      "name": "sparc_pseudocode",
      "description": "SPARC Pseudocode phase with concurrent logic design and algorithm optimization",
      "tags": ["sparc", "pseudocode", "algorithms", "design", "logic", "optimization"],
      "examples": [
        "Generate algorithmic pseudocode for user authentication flow with parallel validation",
        "Design concurrent data processing algorithms with optimization patterns",
        "Create pseudocode specifications for microservices communication protocols"
      ],
      "inputModes": ["text/plain", "application/json", "text/markdown"],
      "outputModes": ["text/plain", "application/json", "text/markdown"]
    },
    {
      "id": "SPARC_REFINEMENT",
      "name": "sparc_refinement",
      "description": "SPARC Refinement phase with parallel TDD implementation and code optimization",
      "tags": ["sparc", "tdd", "refinement", "testing", "optimization", "implementation"],
      "examples": [
        "Implement TDD workflow with parallel test generation and code development",
        "Refine algorithms with performance optimization and concurrent execution",
        "Generate comprehensive test suites with automated validation"
      ],
      "inputModes": ["text/plain", "application/json", "text/x-typescript"],
      "outputModes": ["text/x-typescript", "text/x-python", "application/json", "text/markdown"]
    },
    {
      "id": "PARALLEL_CODE_ANALYSIS",
      "name": "parallel_code_analysis",
      "description": "Concurrent code analysis with pattern recognition and dependency validation",
      "tags": ["analysis", "parallel", "patterns", "dependencies", "validation", "quality"],
      "examples": [
        "Analyze codebase architecture with parallel dependency checking",
        "Identify code patterns and anti-patterns across multiple files simultaneously",
        "Perform security analysis and vulnerability assessment with concurrent scanning"
      ],
      "inputModes": ["text/x-typescript", "text/x-python", "application/json", "text/x-javascript"],
      "outputModes": ["application/json", "text/markdown", "text/html"]
    },
    {
      "id": "CODE_GENERATION",
      "name": "code_generation",
      "description": "Advanced code generation with templates, patterns, and best practices",
      "tags": ["generation", "templates", "patterns", "best-practices", "automation"],
      "examples": [
        "Generate boilerplate code with industry best practices and patterns",
        "Create API implementations with automatic documentation generation",
        "Build component libraries with consistent coding standards"
      ],
      "inputModes": ["text/plain", "application/json", "text/markdown"],
      "outputModes": ["text/x-typescript", "text/x-python", "text/x-javascript", "text/x-java"]
    },
    {
      "id": "TEST_AUTOMATION",
      "name": "test_automation",
      "description": "Comprehensive test automation with parallel execution and coverage analysis",
      "tags": ["testing", "automation", "parallel", "coverage", "quality", "validation"],
      "examples": [
        "Generate unit tests with high coverage and parallel execution support",
        "Create integration tests with automated environment setup",
        "Build end-to-end test suites with concurrent execution pipelines"
      ],
      "inputModes": ["text/x-typescript", "text/x-python", "application/json"],
      "outputModes": ["text/x-typescript", "text/x-python", "application/json", "text/markdown"]
    }
  ],
  "supportsAuthenticatedExtendedCard": true,
  "metadata": {
    "sparcPhase": "refinement",
    "batchtoolsOptimized": true,
    "lastUpdated": "2024-01-15T10:30:00Z",
    "performance": {
      "parallelEfficiency": 0.88,
      "concurrentTasks": 12,
      "averageResponseTime": 680,
      "throughput": 18.3,
      "resourceUtilization": {
        "cpu": 55,
        "memory": 3072,
        "network": 64
      },
      "lastMeasured": "2024-01-15T10:25:00Z"
    },
    "sparcIntegration": {
      "supportedPhases": ["pseudocode", "refinement", "implementation", "testing"],
      "currentPhase": "refinement",
      "phaseOptimizations": {
        "pseudocode": ["algorithm_design", "logic_optimization", "pattern_recognition"],
        "refinement": ["tdd_implementation", "parallel_testing", "code_optimization"],
        "implementation": ["best_practices", "pattern_application", "quality_assurance"],
        "testing": ["automated_testing", "parallel_execution", "coverage_analysis"]
      },
      "workflowId": "sparc-workflow-001",
      "batchProcessingEnabled": true,
      "parallelCapabilities": ["concurrent_analysis", "parallel_testing", "batch_compilation"]
    },
    "tddIntegration": {
      "enabled": true,
      "testFrameworks": ["jest", "pytest", "mocha", "junit"],
      "coverageThreshold": 85,
      "parallelTestExecution": true,
      "automatedTestGeneration": true
    }
  }
}