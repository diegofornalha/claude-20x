#!/usr/bin/env python3
"""
ü§ñ HYBRID ANALYTICS AGENT - Exemplos do Sistema Inteligente

Este arquivo demonstra como o Analytics Agent h√≠brido escolhe automaticamente 
entre Matplotlib (est√°tico) e Plotly (interativo) baseado no contexto.

Desenvolvido em: 15 de Janeiro de 2025
Status: üöÄ Implementa√ß√£o Completa
"""

import sys
import os

# Simular as ferramentas do agent para demonstra√ß√£o
def simulate_smart_decision(user_prompt, data_size=0):
    """Simula a ferramenta SmartChartDecisionTool"""
    prompt_lower = user_prompt.lower()
    
    # Keywords que sugerem Plotly (interativo/web)
    plotly_keywords = [
        'interativo', 'interactive', 'web', 'html', 'dashboard', 
        'zoom', 'hover', 'navegador', 'browser', 'clic√°vel', 
        'arrastar', 'din√¢mico', 'online', 'responsivo', 'explorar'
    ]
    
    # Keywords que sugerem Matplotlib (est√°tico/relat√≥rio)
    matplotlib_keywords = [
        'relat√≥rio', 'report', 'pdf', 'imprimir', 'print', 'est√°tico', 
        'static', 'simples', 'simple', 'documento', 'document', 
        'arquivo', 'file', 'png', 'jpeg'
    ]
    
    plotly_score = sum(1 for keyword in plotly_keywords if keyword in prompt_lower)
    matplotlib_score = sum(1 for keyword in matplotlib_keywords if keyword in prompt_lower)
    
    # Fator tamanho dos dados
    if data_size > 20:
        plotly_score += 2
    elif data_size > 0 and data_size <= 10:
        matplotlib_score += 1
    
    # Indicadores de complexidade
    complex_indicators = ['m√∫ltiplas', 'v√°rias', 'tempo', 'time', 's√©ries', 'series', 'linhas', 'comparar']
    if any(indicator in prompt_lower for indicator in complex_indicators):
        plotly_score += 1
    
    # Decis√£o
    if plotly_score > matplotlib_score:
        decision = 'plotly'
        reasoning = f"Plotly escolhido (score: {plotly_score} vs {matplotlib_score}) - contexto sugere interatividade"
    elif matplotlib_score > plotly_score:
        decision = 'matplotlib' 
        reasoning = f"Matplotlib escolhido (score: {matplotlib_score} vs {plotly_score}) - contexto sugere simplicidade/documento"
    else:
        decision = 'plotly'
        reasoning = f"Plotly escolhido por padr√£o (scores empatados: {plotly_score}={matplotlib_score}) - melhor UX"
    
    return decision, reasoning, plotly_score, matplotlib_score


def print_decision_analysis(prompt, data_size=0):
    """Exibe an√°lise detalhada da decis√£o"""
    decision, reasoning, plotly_score, matplotlib_score = simulate_smart_decision(prompt, data_size)
    
    print(f"\n{'='*80}")
    print(f"üìù PROMPT: '{prompt}'")
    print(f"üìä Tamanho dos dados: {data_size} pontos")
    print(f"{'='*80}")
    print(f"üìà Score Plotly: {plotly_score}")
    print(f"üìä Score Matplotlib: {matplotlib_score}")
    print(f"ü§ñ DECIS√ÉO: {decision.upper()}")
    print(f"üß† RACIOC√çNIO: {reasoning}")
    print(f"{'='*80}\n")


def main():
    """Demonstra o sistema h√≠brido com diferentes exemplos"""
    
    print("ü§ñ HYBRID ANALYTICS AGENT - Sistema de Decis√£o Inteligente")
    print("=" * 80)
    print("Este sistema escolhe automaticamente entre Matplotlib e Plotly baseado no contexto.")
    print("=" * 80)
    
    # üåü EXEMPLOS QUE ATIVAM PLOTLY (INTERATIVO)
    print("\nüöÄ EXEMPLOS QUE ATIVAM PLOTLY (INTERATIVO):")
    
    plotly_examples = [
        ("Crie um gr√°fico interativo para o dashboard", 15),
        ("Preciso de um chart para web com zoom e hover", 25),
        ("Generate a dynamic chart for browser visualization", 12),
        ("Gr√°fico responsivo para navegador online", 8),
        ("Dashboard chart with clickable interactions", 30),
        ("Chart explorat√≥rio com m√∫ltiplas s√©ries de tempo", 45),
        ("Visualiza√ß√£o din√¢mica para an√°lise de dados", 20)
    ]
    
    for prompt, size in plotly_examples:
        print_decision_analysis(prompt, size)
    
    # üìä EXEMPLOS QUE ATIVAM MATPLOTLIB (EST√ÅTICO)
    print("\nüìä EXEMPLOS QUE ATIVAM MATPLOTLIB (EST√ÅTICO):")
    
    matplotlib_examples = [
        ("Gere um gr√°fico simples para relat√≥rio PDF", 5),
        ("Chart para imprimir em documento", 8),
        ("Static chart for report document", 3),
        ("Gr√°fico est√°tico para arquivo PNG", 10),
        ("Simple bar chart for document printing", 6),
        ("Chart para relat√≥rio mensal em PDF", 12),
        ("Visualiza√ß√£o simples para apresenta√ß√£o impressa", 4)
    ]
    
    for prompt, size in matplotlib_examples:
        print_decision_analysis(prompt, size)
    
    # ‚öñÔ∏è EXEMPLOS NEUTROS (PLOTLY POR PADR√ÉO)
    print("\n‚öñÔ∏è EXEMPLOS NEUTROS (PLOTLY POR PADR√ÉO - MELHOR UX):")
    
    neutral_examples = [
        ("Create a revenue chart", 15),
        ("Gere um gr√°fico de vendas", 10),
        ("Chart with sales data", 7),
        ("Visualiza√ß√£o de dados financeiros", 20),
        ("Generate chart for Q1 data", 25)
    ]
    
    for prompt, size in neutral_examples:
        print_decision_analysis(prompt, size)
    
    # üìà EXEMPLOS COM TAMANHO DE DADOS
    print("\nüìà EXEMPLOS INFLUENCIADOS PELO TAMANHO DOS DADOS:")
    
    size_examples = [
        ("Chart de vendas", 5),    # Pequeno -> favorece Matplotlib  
        ("Chart de vendas", 25),   # Grande -> favorece Plotly
        ("Gr√°fico simples", 2),    # Muito pequeno -> favorece Matplotlib
        ("Gr√°fico simples", 50),   # Muito grande -> favorece Plotly
    ]
    
    for prompt, size in size_examples:
        print_decision_analysis(prompt, size)
    
    # üéØ RESUMO DAS DECIS√ïES
    print("\nüéØ RESUMO DO SISTEMA DE DECIS√ÉO H√çBRIDO:")
    print("=" * 80)
    print("‚úÖ PLOTLY √© escolhido quando:")
    print("   ‚Ä¢ Contexto sugere interatividade (web, dashboard, zoom, hover)")
    print("   ‚Ä¢ Muitos pontos de dados (>20)")
    print("   ‚Ä¢ M√∫ltiplas s√©ries ou complexidade")
    print("   ‚Ä¢ Empate ou contexto neutro (melhor UX)")
    print()
    print("‚úÖ MATPLOTLIB √© escolhido quando:")
    print("   ‚Ä¢ Contexto sugere estaticidade (relat√≥rio, PDF, imprimir)")
    print("   ‚Ä¢ Poucos pontos de dados (‚â§10)")
    print("   ‚Ä¢ Simplicidade expl√≠cita")
    print("   ‚Ä¢ Destino √© documento/arquivo")
    print()
    print("üöÄ VANTAGEM DO SISTEMA H√çBRIDO:")
    print("   ‚Ä¢ Automatiza√ß√£o total - zero decis√£o manual")
    print("   ‚Ä¢ Melhor ferramenta para cada contexto")
    print("   ‚Ä¢ Fallback inteligente se uma biblioteca falhar")
    print("   ‚Ä¢ Transpar√™ncia - sempre explica a decis√£o")
    print("=" * 80)


if __name__ == "__main__":
    main()